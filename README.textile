h1. About

DiPPCore is the Java based Connector for the DiPP Platform Modules. DiPPCore provides SOAP-Web services for accessing and managing various content (e.g. journals, articles, supplementary materials) of the DiPP Plattform.    

h1. Releases

Current Release DiPPCore 1.3.02
* added DiPPIdentifier and generic Identifier element to person metadata schema
* added JUnit tests for Webservice Implementation
* reorganized project to fit to Maven convention ("convention goes over configuration")
* added Maven configuration for war-deployment
* merged DiPPFedora2 and DiPPFedora3 into DiPPCore to streamline compilation and deployment 

h1. Status

stable

h1. License

The contents of the project is subject to the D-FSL License Version 1.0 (the "License"). 
You may not use this software except in compliance with the License. You may obtain a copy of the License
at http://www.dipp.nrw.de/dfsl/

Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language governing rights and limitations under the License.

Portions created for the Fedora Repository System are Copyright 2002-2005 by The Rector and Visitors of the University of Virginia and Cornell University. All rights reserved.

h1. Install

DiPPCore should be deployed as WebArchive (war) container within the Tomcat Web-Application Server. To generate the war-container please run mvn clean compile war:war

DiPPCore is part of the DiPP Platform. Further modules required to run DiPP are Fedora Commons Repository System and Plone CMI with DiPP Extensions. For more information please contact dipp
   

h1. Development

h2. Code Generation 

DiPPCore relies on auto generated code from the Axis-framework and from XMLBeans. 

h3. Axis SOAP WebServices

Any changes to SOAP WebServices may be implemented according the "Contract First" concept. Please make use of dippDoc.wdsl to implement contract changes. DiPPCore provides a shell script dippAxisGenerator.sh to generate classes. Please configure either your development system or shell script accordingly.

h3. XMLBeans

DiPP provides a shell script dippXBeanGenerator.sh to create XMLBean Packages. Please configure either your development system or the shell script accordingly.
New beans may be added as jar to the DiPPCore by using an local Maven Repository and configure pom.xml.

h3. Connect to SOAP ZSI (Python SOAP Framework)

The DiPP Plone Frontend uses ZSI to communicate with the DiPPCore SOAP-API. To generate ZSI client classes for the API please copy dippDoc.wsdl to the location of your Python instance, install the ZSI2.0 Egg and run 

<code>
/files/lib/python[-version]/bin/wsdl2py -b -e
-u [path/to/]dippDoc.wsdl
-o /files/lib/python[-version].4.5/lib/python[version]/site-packages/fedora3/
</code>

Afterward you have to replace one Line for the method setQualifiedDublinCore within the auto generated class ContentModelService_services.py.

Replace
<code>
#check for soap, assume soap:fault
 if self.binding.IsSOAP(): self.binding.Receive(None, **kw)
</code> 

with
<code>
#check for soap, assume soap:fault
 if self.binding.IsSOAP(): self.binding.ReceiveRaw
</code> 




 